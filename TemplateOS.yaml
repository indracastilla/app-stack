kind: Template
apiVersion: v1
metadata:
  name: todo-en-un-template
  annotations:
    description: Desplegamos toda la app en un template
labels:
  application: app-stack
  createdBy: todo-en-un-template
parameters:
- description: Nombre de la App
  name: APPLICATION_NAME
  value: app-stack
- description: Secret para el build desde GitHub
  name: GITHUB_SECRET
  value: mysecret
objects:
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: 'app-stack:latest'
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        ref: master
        uri: 'https://github.com/indracastilla/app-stack.git'
      type: Git
    strategy:
      dockerStrategy: {}
      type: Docker
    successfulBuildsHistoryLimit: 5
    triggers:
    - type: GitHub
      github:
        secret: "${GITHUB_SECRET}"
- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    name: "${APPLICATION_NAME}"
  spec:
    lookupPolicy:
      local: false
    tags:
      - annotations:
          openshift.io/imported-from: 'cowbotic/app-stack:latest'
        from:
          kind: DockerImage
          name: 'cowbotic/app-stack:latest'
        generation: 2
        importPolicy: {}
        name: latest
        referencePolicy:
          type: Source
- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    generation: 2
    labels:
      app: redis-server
    name: redis
  spec:
    lookupPolicy:
      local: false
    tags:
      - annotations:
          openshift.io/imported-from: 'redis:5.0.2-alpine'
        from:
          kind: DockerImage
          name: 'redis:5.0.2-alpine'
        generation: 2
        importPolicy: {}
        name: 5.0.2-alpine
        referencePolicy:
          type: Source
- kind: DeploymentConfig
  apiVersion: apps.openshift.io/v1
  metadata:
    name: redis-server
  spec:
    replicas: 1
    selector:
      app: redis-server
      deploymentconfig: redis-server
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: redis-server
          deploymentconfig: redis-server
      spec:
        containers:
          - image: redis-server:5.0.2-alpine
            imagePullPolicy: IfNotPresent
            name: redis
            ports:
              - containerPort: 6379
                protocol: TCP
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
              - mountPath: /data
                name: redis-1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
          - emptyDir: {}
            name: redis-1
    test: false
    triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
            - redis
          from:
            kind: ImageStreamTag
            name: 'redis:5.0.2-alpine'
        type: ImageChange
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      deploymentConfig: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${APPLICATION_NAME}"
        from:
          kind: ImageStreamTag
          name: "${APPLICATION_NAME}:latest"
    - type: ConfigChange
    replicas: 1
    selector:
      deploymentConfig: "${APPLICATION_NAME}"
    template:
      metadata:
        labels:
          deploymentConfig: "${APPLICATION_NAME}"
      spec:
        containers:
        - name: "${APPLICATION_NAME}"
          image: "${APPLICATION_NAME}"
          ports:
          - name: http
            containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: Always
          securityContext:
            capabilities: {}
            privileged: false
        restartPolicy: Always
        dnsPolicy: ClusterFirst
- kind: Route
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    annotations:
      description: Route for application's http service
  spec:
    host: ruta-app-stack-demo.104.40.229.38.nip.io
    to:
      kind: Service
      name: "${APPLICATION_NAME}"
- kind: Service
  apiVersion: v1
  metadata:
    name: redis-server
  spec:
    ports:
    - name: 6379-tcp
      port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      deploymentconfig: redis-server
    sessionAffinity: None
    type: ClusterIP
- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    annotations:
      description: The web server's http port
  spec:
    ports:
      - name: 80-tcp
        port: 80
        protocol: TCP
        targetPort: 80
    selector:
      deploymentconfig: "${APPLICATION_NAME}"
    sessionAffinity: None
    type: ClusterIP
